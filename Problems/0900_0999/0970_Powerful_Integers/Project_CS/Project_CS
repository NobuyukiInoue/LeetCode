using System;
using System.Collections.Generic;

public class Solution
{
    public IList<int> PowerfulIntegers(int x, int y, int bound)
    {
        IList<int> results = new IList<int>();
        IList<int, int> stack = new IList<int, int>();

        while (stack.Count > 0)
        {
            i = stack[stack.Count - 1][0];
            j = stack[stack.Count - 1][1];
            stack.Remove();
            t = x ** i + y ** j;
            if (t <= bound)
            {
                s.Add(t);
                if (x > 1)
                    stack.Add(i + 1, j);
                if (y > 1)
                    stack.Add(i, j + 1);
            }
        }
        return results;
    }

    public string output_IList_array(IList<int> datas)
    {
        if (datas.Count <= 0)
            return "";

        string resultStr = datas[0].ToString();
        for (int i = 1; i < datas.Count; ++i)
        {
            resultStr += "," + datas[i].ToString();
        }

        return resultStr;
    }

    public void Main(string args)
    {
        string[] flds = args.Replace("[","").Replace("]","").Trim().Split(',');
        int x = int.Parse(flds[0]);
        int y = int.Parse(flds[1]);
        int bound = int.Parse(flds[2]);

        System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
        sw.Start();

        IList<int> results = FindRelativeRanks(nums);
        Console.WriteLine("result = " + output_str_array(results));

        sw.Stop();
        Console.WriteLine("Execute time ... " + sw.ElapsedMilliseconds.ToString() + "ms\n");
    }
}
